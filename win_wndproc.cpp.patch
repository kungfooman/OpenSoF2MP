--- a/codemp/win32/win_wndproc.cpp
+++ b/codemp/win32/win_wndproc.cpp
@@ -103,63 +103,63 @@ static void VID_AppActivate(BOOL fActive, BOOL minimize)
 static byte virtualKeyConvert[0x92][2] =
 {
 	{ 0,				0				},     
-	{ A_MOUSE1,			A_MOUSE1		}, // VK_LBUTTON 01 Left mouse button  
-	{ A_MOUSE2,			A_MOUSE2		}, // VK_RBUTTON 02 Right mouse button  
+	{ K_MOUSE1,			K_MOUSE1		}, // VK_LBUTTON 01 Left mouse button  
+	{ K_MOUSE2,			K_MOUSE2		}, // VK_RBUTTON 02 Right mouse button  
 	{ 0,				0				}, // VK_CANCEL 03 Control-break processing  
-	{ A_MOUSE3,			A_MOUSE3		}, // VK_MBUTTON 04 Middle mouse button (three-button mouse)  
-	{ A_MOUSE4,			A_MOUSE4		}, // VK_XBUTTON1 05 Windows 2000/XP: X1 mouse button 
-	{ A_MOUSE5,			A_MOUSE5		}, // VK_XBUTTON2 06 Windows 2000/XP: X2 mouse button 
+	{ K_MOUSE3,			K_MOUSE3		}, // VK_MBUTTON 04 Middle mouse button (three-button mouse)  
+	{ K_MOUSE4,			K_MOUSE4		}, // VK_XBUTTON1 05 Windows 2000/XP: X1 mouse button 
+	{ K_MOUSE5,			K_MOUSE5		}, // VK_XBUTTON2 06 Windows 2000/XP: X2 mouse button 
 	{ 0,				0				}, // 07 Undefined  
-	{ A_BACKSPACE,		A_BACKSPACE		}, // VK_BACK 08 BACKSPACE key  
-	{ A_TAB,			A_TAB			}, // VK_TAB 09 TAB key  
+	{ K_BACKSPACE,		K_BACKSPACE		}, // VK_BACK 08 BACKSPACE key  
+	{ K_TAB,			K_TAB			}, // VK_TAB 09 TAB key  
 	{ 0,				0				}, // 0A Reserved  
 	{ 0,				0				}, // 0B Reserved  
-	{ A_KP_5,			0				}, // VK_CLEAR 0C CLEAR key  
-	{ A_ENTER, 			A_KP_ENTER 		}, // VK_RETURN 0D ENTER key  
+	{ K_KP_5,			0				}, // VK_CLEAR 0C CLEAR key  
+	{ K_ENTER,			K_KP_ENTER 		}, // VK_RETURN 0D ENTER key  
 	{ 0,				0				}, // 0E Undefined  
 	{ 0,				0				}, // 0F Undefined  
-	{ A_SHIFT,			A_SHIFT			}, // VK_SHIFT 10 SHIFT key  
-	{ A_CTRL,			A_CTRL			}, // VK_CONTROL 11 CTRL key  
-	{ A_ALT,			A_ALT			}, // VK_MENU 12 ALT key  
-	{ A_PAUSE,			A_PAUSE			}, // VK_PAUSE 13 PAUSE key  
-	{ A_CAPSLOCK,		A_CAPSLOCK		}, // VK_CAPITAL 14 CAPS LOCK key  
+	{ K_SHIFT,			K_SHIFT			}, // VK_SHIFT 10 SHIFT key  
+	{ K_CTRL,			K_CTRL			}, // VK_CONTROL 11 CTRL key  
+	{ K_ALT,			K_ALT			}, // VK_MENU 12 ALT key  
+	{ K_PAUSE,			K_PAUSE			}, // VK_PAUSE 13 PAUSE key  
+	{ K_CAPSLOCK,		K_CAPSLOCK		}, // VK_CAPITAL 14 CAPS LOCK key  
 	{ 0,				0				}, // VK_KANA 15 IME Kana mode 
 	{ 0,				0				}, // 16 Undefined  
 	{ 0,				0				}, // VK_JUNJA 17 IME Junja mode 
 	{ 0,				0				}, // VK_FINAL 18 IME final mode 
 	{ 0,				0				}, // VK_KANJI 19 IME Kanji mode 
 	{ 0,				0				}, // 1A Undefined  
-	{ A_ESCAPE,			A_ESCAPE		}, // VK_ESCAPE 1B ESC key  
+	{ K_ESCAPE,			K_ESCAPE		}, // VK_ESCAPE 1B ESC key  
 	{ 0,				0				}, // VK_CONVERT 1C IME convert 
 	{ 0,				0				}, // VK_NONCONVERT 1D IME nonconvert 
 	{ 0,				0				}, // VK_ACCEPT 1E IME accept 
 	{ 0,				0				}, // VK_MODECHANGE 1F IME mode change request 
-	{ A_SPACE,			A_SPACE			}, // VK_SPACE 20 SPACEBAR  
-	{ A_KP_9,			A_PAGE_UP		}, // VK_PRIOR 21 PAGE UP key  
-	{ A_KP_3,			A_PAGE_DOWN		}, // VK_NEXT 22 PAGE DOWN key  
-	{ A_KP_1,			A_END			}, // VK_END 23 END key  
-	{ A_KP_7,			A_HOME			}, // VK_HOME 24 HOME key  
-	{ A_KP_4,			A_CURSOR_LEFT	}, // VK_LEFT 25 LEFT ARROW key  
-	{ A_KP_8,			A_CURSOR_UP   	}, // VK_UP 26 UP ARROW key  
-	{ A_KP_6,			A_CURSOR_RIGHT	}, // VK_RIGHT 27 RIGHT ARROW key  
-	{ A_KP_2,			A_CURSOR_DOWN	}, // VK_DOWN 28 DOWN ARROW key  
+	{ K_SPACE,			K_SPACE			}, // VK_SPACE 20 SPACEBAR  
+	{ K_KP_PGUP,		K_PGUP			}, // VK_PRIOR 21 PAGE UP key  
+	{ K_KP_PGDN,		K_PGDN			}, // VK_NEXT 22 PAGE DOWN key  
+	{ K_KP_END,			K_END			}, // VK_END 23 END key  
+	{ K_KP_HOME,		K_HOME			}, // VK_HOME 24 HOME key  
+	{ K_KP_LEFTARROW,	K_LEFTARROW		}, // VK_LEFT 25 LEFT ARROW key  
+	{ K_KP_UPARROW,		K_UPARROW   	}, // VK_UP 26 UP ARROW key  
+	{ K_KP_RIGHTARROW,	K_RIGHTARROW	}, // VK_RIGHT 27 RIGHT ARROW key  
+	{ K_KP_DOWNARROW,	K_DOWNARROW		}, // VK_DOWN 28 DOWN ARROW key  
 	{ 0,				0				}, // VK_SELECT 29 SELECT key  
 	{ 0,				0				}, // VK_PRINT 2A PRINT key 
 	{ 0,				0				}, // VK_EXECUTE 2B EXECUTE key  
-	{ A_PRINTSCREEN,	A_PRINTSCREEN	}, // VK_SNAPSHOT 2C PRINT SCREEN key  
-	{ A_KP_0,			A_INSERT		}, // VK_INSERT 2D INS key  
-	{ A_KP_PERIOD,		A_DELETE		}, // VK_DELETE 2E DEL key  
+	{ 0,				0				}, // VK_SNAPSHOT 2C PRINT SCREEN key  
+	{ K_KP_INS,			K_INS			}, // VK_INSERT 2D INS key  
+	{ K_KP_DEL,			K_DEL			}, // VK_DELETE 2E DEL key  
 	{ 0,				0				}, // VK_HELP 2F HELP key  
-	{ A_0,				A_0				}, // 30 0 key  
-	{ A_1,				A_1				}, // 31 1 key  
-	{ A_2,				A_2				}, // 32 2 key  
-	{ A_3,				A_3				}, // 33 3 key  
-	{ A_4,				A_4				}, // 34 4 key  
-	{ A_5,				A_5				}, // 35 5 key  
-	{ A_6,				A_6				}, // 36 6 key  
-	{ A_7,				A_7				}, // 37 7 key  
-	{ A_8,				A_8				}, // 38 8 key  
-	{ A_9,				A_9				}, // 39 9 key  
+	{ K_0,				K_0				}, // 30 0 key  
+	{ K_1,				K_1				}, // 31 1 key  
+	{ K_2,				K_2				}, // 32 2 key  
+	{ K_3,				K_3				}, // 33 3 key  
+	{ K_4,				K_4				}, // 34 4 key  
+	{ K_5,				K_5				}, // 35 5 key  
+	{ K_6,				K_6				}, // 36 6 key  
+	{ K_7,				K_7				}, // 37 7 key  
+	{ K_8,				K_8				}, // 38 8 key  
+	{ K_9,				K_9				}, // 39 9 key  
 	{ 0,				0				}, // 3A Undefined  
 	{ 0,				0				}, // 3B Undefined  
 	{ 0,				0				}, // 3C Undefined  
@@ -167,65 +167,65 @@ static byte virtualKeyConvert[0x92][2] =
 	{ 0,				0				}, // 3E Undefined  
 	{ 0,				0				}, // 3F Undefined  
 	{ 0,				0				}, // 40 Undefined  
-	{ A_CAP_A,			A_CAP_A			}, // 41 A key  
-	{ A_CAP_B,			A_CAP_B			}, // 42 B key  
-	{ A_CAP_C,			A_CAP_C			}, // 43 C key  
-	{ A_CAP_D,			A_CAP_D			}, // 44 D key  
-	{ A_CAP_E,			A_CAP_E			}, // 45 E key  
-	{ A_CAP_F,			A_CAP_F			}, // 46 F key  
-	{ A_CAP_G,			A_CAP_G			}, // 47 G key  
-	{ A_CAP_H,			A_CAP_H			}, // 48 H key  
-	{ A_CAP_I,			A_CAP_I			}, // 49 I key  
-	{ A_CAP_J,			A_CAP_J			}, // 4A J key  
-	{ A_CAP_K,			A_CAP_K			}, // 4B K key  
-	{ A_CAP_L,			A_CAP_L			}, // 4C L key  
-	{ A_CAP_M,			A_CAP_M			}, // 4D M key  
-	{ A_CAP_N,			A_CAP_N			}, // 4E N key  
-	{ A_CAP_O,			A_CAP_O			}, // 4F O key  
-	{ A_CAP_P,			A_CAP_P			}, // 50 P key  
-	{ A_CAP_Q,			A_CAP_Q			}, // 51 Q key  
-	{ A_CAP_R,			A_CAP_R			}, // 52 R key  
-	{ A_CAP_S,			A_CAP_S			}, // 53 S key  
-	{ A_CAP_T,			A_CAP_T			}, // 54 T key  
-	{ A_CAP_U,			A_CAP_U			}, // 55 U key  
-	{ A_CAP_V,			A_CAP_V			}, // 56 V key  
-	{ A_CAP_W,			A_CAP_W			}, // 57 W key  
-	{ A_CAP_X,			A_CAP_X			}, // 58 X key  
-	{ A_CAP_Y,			A_CAP_Y			}, // 59 Y key  
-	{ A_CAP_Z,			A_CAP_Z			}, // 5A Z key  
+	{ K_LOW_A,			K_LOW_A			}, // 41 A key  
+	{ K_LOW_B,			K_LOW_B			}, // 42 B key  
+	{ K_LOW_C,			K_LOW_C			}, // 43 C key  
+	{ K_LOW_D,			K_LOW_D			}, // 44 D key  
+	{ K_LOW_E,			K_LOW_E			}, // 45 E key  
+	{ K_LOW_F,			K_LOW_F			}, // 46 F key  
+	{ K_LOW_G,			K_LOW_G			}, // 47 G key  
+	{ K_LOW_H,			K_LOW_H			}, // 48 H key  
+	{ K_LOW_I,			K_LOW_I			}, // 49 I key  
+	{ K_LOW_J,			K_LOW_J			}, // 4A J key  
+	{ K_LOW_K,			K_LOW_K			}, // 4B K key  
+	{ K_LOW_L,			K_LOW_L			}, // 4C L key  
+	{ K_LOW_M,			K_LOW_M			}, // 4D M key  
+	{ K_LOW_N,			K_LOW_N			}, // 4E N key  
+	{ K_LOW_O,			K_LOW_O			}, // 4F O key  
+	{ K_LOW_P,			K_LOW_P			}, // 50 P key  
+	{ K_LOW_Q,			K_LOW_Q			}, // 51 Q key  
+	{ K_LOW_R,			K_LOW_R			}, // 52 R key  
+	{ K_LOW_S,			K_LOW_S			}, // 53 S key  
+	{ K_LOW_T,			K_LOW_T			}, // 54 T key  
+	{ K_LOW_U,			K_LOW_U			}, // 55 U key  
+	{ K_LOW_V,			K_LOW_V			}, // 56 V key  
+	{ K_LOW_W,			K_LOW_W			}, // 57 W key  
+	{ K_LOW_X,			K_LOW_X			}, // 58 X key  
+	{ K_LOW_Y,			K_LOW_Y			}, // 59 Y key  
+	{ K_LOW_Z,			K_LOW_Z			}, // 5A Z key  
 	{ 0,				0				}, // VK_LWIN 5B Left Windows key (Microsoft® Natural® keyboard)  
 	{ 0,				0				}, // VK_RWIN 5C Right Windows key (Natural keyboard)  
 	{ 0,				0				}, // VK_APPS 5D Applications key (Natural keyboard)  
 	{ 0,				0				}, // 5E Reserved  
 	{ 0,				0				}, // VK_SLEEP 5F Computer Sleep key 
-	{ A_KP_0,			A_KP_0			}, // VK_NUMPAD0 60 Numeric keypad 0 key  
-	{ A_KP_1,			A_KP_1			}, // VK_NUMPAD1 61 Numeric keypad 1 key  
-	{ A_KP_2,			A_KP_2			}, // VK_NUMPAD2 62 Numeric keypad 2 key  
-	{ A_KP_3,			A_KP_3			}, // VK_NUMPAD3 63 Numeric keypad 3 key  
-	{ A_KP_4,			A_KP_4			}, // VK_NUMPAD4 64 Numeric keypad 4 key  
-	{ A_KP_5,			A_KP_5			}, // VK_NUMPAD5 65 Numeric keypad 5 key  
-	{ A_KP_6,			A_KP_6			}, // VK_NUMPAD6 66 Numeric keypad 6 key  
-	{ A_KP_7,			A_KP_7			}, // VK_NUMPAD7 67 Numeric keypad 7 key  
-	{ A_KP_8,			A_KP_8			}, // VK_NUMPAD8 68 Numeric keypad 8 key  
-	{ A_KP_9,			A_KP_9			}, // VK_NUMPAD9 69 Numeric keypad 9 key  
-	{ A_MULTIPLY,		A_MULTIPLY		}, // VK_MULTIPLY 6A Multiply key  
-	{ A_KP_PLUS, 		A_KP_PLUS 		}, // VK_ADD 6B Add key  
+	{ K_0,				K_0				}, // VK_NUMPAD0 60 Numeric keypad 0 key  
+	{ K_1,				K_1				}, // VK_NUMPAD1 61 Numeric keypad 1 key  
+	{ K_2,				K_2				}, // VK_NUMPAD2 62 Numeric keypad 2 key  
+	{ K_3,				K_3				}, // VK_NUMPAD3 63 Numeric keypad 3 key  
+	{ K_4,				K_4				}, // VK_NUMPAD4 64 Numeric keypad 4 key  
+	{ K_5,				K_5				}, // VK_NUMPAD5 65 Numeric keypad 5 key  
+	{ K_6,				K_6				}, // VK_NUMPAD6 66 Numeric keypad 6 key  
+	{ K_7,				K_7				}, // VK_NUMPAD7 67 Numeric keypad 7 key  
+	{ K_8,				K_8				}, // VK_NUMPAD8 68 Numeric keypad 8 key  
+	{ K_9,				K_9				}, // VK_NUMPAD9 69 Numeric keypad 9 key  
+	{ K_KP_STAR,		K_KP_STAR		}, // VK_MULTIPLY 6A Multiply key  
+	{ K_KP_PLUS, 		K_KP_PLUS 		}, // VK_ADD 6B Add key  
 	{ 0,				0				}, // VK_SEPARATOR 6C Separator key  
-	{ A_KP_MINUS,		A_KP_MINUS		}, // VK_SUBTRACT 6D Subtract key  
-	{ A_KP_PERIOD,		A_KP_PERIOD		}, // VK_DECIMAL 6E Decimal key  
-	{ A_DIVIDE,			A_DIVIDE		}, // VK_DIVIDE 6F Divide key  
-	{ A_F1,				A_F1			}, // VK_F1 70 F1 key  
-	{ A_F2,				A_F2			}, // VK_F2 71 F2 key  
-	{ A_F3,				A_F3			}, // VK_F3 72 F3 key  
-	{ A_F4,				A_F4			}, // VK_F4 73 F4 key  
-	{ A_F5,				A_F5			}, // VK_F5 74 F5 key  
-	{ A_F6,				A_F6			}, // VK_F6 75 F6 key  
-	{ A_F7,				A_F7			}, // VK_F7 76 F7 key  
-	{ A_F8,				A_F8			}, // VK_F8 77 F8 key  
-	{ A_F9,				A_F9			}, // VK_F9 78 F9 key  
-	{ A_F10,			A_F10			}, // VK_F10 79 F10 key  
-	{ A_F11,			A_F11			}, // VK_F11 7A F11 key  
-	{ A_F12,			A_F12			}, // VK_F12 7B F12 key  
+	{ K_KP_MINUS,		K_KP_MINUS		}, // VK_SUBTRACT 6D Subtract key  
+	{ K_KP_DEL,			K_KP_DEL		}, // VK_DECIMAL 6E Decimal key  
+	{ K_KP_SLASH,		K_KP_SLASH		}, // VK_DIVIDE 6F Divide key  
+	{ K_F1,				K_F1			}, // VK_F1 70 F1 key  
+	{ K_F2,				K_F2			}, // VK_F2 71 F2 key  
+	{ K_F3,				K_F3			}, // VK_F3 72 F3 key  
+	{ K_F4,				K_F4			}, // VK_F4 73 F4 key  
+	{ K_F5,				K_F5			}, // VK_F5 74 F5 key  
+	{ K_F6,				K_F6			}, // VK_F6 75 F6 key  
+	{ K_F7,				K_F7			}, // VK_F7 76 F7 key  
+	{ K_F8,				K_F8			}, // VK_F8 77 F8 key  
+	{ K_F9,				K_F9			}, // VK_F9 78 F9 key  
+	{ K_F10,			K_F10			}, // VK_F10 79 F10 key  
+	{ K_F11,			K_F11			}, // VK_F11 7A F11 key  
+	{ K_F12,			K_F12			}, // VK_F12 7B F12 key  
 	{ 0,				0				}, // VK_F13 7C F13 key  
 	{ 0,				0				}, // VK_F14 7D F14 key  
 	{ 0,				0				}, // VK_F15 7E F15 key  
@@ -246,8 +246,8 @@ static byte virtualKeyConvert[0x92][2] =
 	{ 0,				0				}, // 8D Unassigned
 	{ 0,				0				}, // 8E Unassigned
 	{ 0,				0				}, // 8F Unassigned
-	{ A_NUMLOCK,		A_NUMLOCK		}, // VK_NUMLOCK 90 NUM LOCK key  
-	{ A_SCROLLLOCK,		A_SCROLLLOCK	}  // VK_SCROLL 91 
+	{ K_KP_NUMLOCK,		K_KP_NUMLOCK	}, // VK_NUMLOCK 90 NUM LOCK key  
+	{ 0,				0	}  // VK_SCROLL 91 
 };
 
 /*
@@ -265,7 +265,7 @@ static int MapKey (ulong key, word wParam)
 	scan = ( key >> 16 ) & 0xff;
 	if(scan == CONSOLE_SCAN_CODE)
 	{
-		return(A_CONSOLE);
+		return(K_CONSOLE);
 	}
 
 	// Try to convert the virtual key directly
@@ -324,13 +324,13 @@ LONG WINAPI MainWndProc (
 	{
 		if ( ( ( int ) wParam ) > 0 )
 		{
-			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, A_MWHEELUP, qtrue, 0, NULL );
-			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, A_MWHEELUP, qfalse, 0, NULL );
+			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, K_MWHEELUP, qtrue, 0, NULL );
+			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, K_MWHEELUP, qfalse, 0, NULL );
 		}
 		else
 		{
-			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, A_MWHEELDOWN, qtrue, 0, NULL );
-			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, A_MWHEELDOWN, qfalse, 0, NULL );
+			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, K_MWHEELDOWN, qtrue, 0, NULL );
+			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, K_MWHEELDOWN, qfalse, 0, NULL );
 		}
         return DefWindowProc (hWnd, uMsg, wParam, lParam);
 	}
@@ -345,13 +345,13 @@ LONG WINAPI MainWndProc (
 		//
 		if ( ( short ) HIWORD( wParam ) > 0 )
 		{
-			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, A_MWHEELUP, qtrue, 0, NULL );
-			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, A_MWHEELUP, qfalse, 0, NULL );
+			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, K_MWHEELUP, qtrue, 0, NULL );
+			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, K_MWHEELUP, qfalse, 0, NULL );
 		}
 		else
 		{
-			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, A_MWHEELDOWN, qtrue, 0, NULL );
-			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, A_MWHEELDOWN, qfalse, 0, NULL );
+			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, K_MWHEELDOWN, qtrue, 0, NULL );
+			Sys_QueEvent( g_wv.sysMsgTime, SE_KEY, K_MWHEELDOWN, qfalse, 0, NULL );
 		}
 		break;
 
-- 
2.17.0

