--- a/codemp/client/cl_input.cpp
+++ b/codemp/client/cl_input.cpp
@@ -7,12 +7,6 @@
 unsigned	frame_msec;
 int			old_com_frameTime;
 
-float cl_mPitchOverride = 0.0f;
-float cl_mYawOverride = 0.0f;
-float cl_mSensitivityOverride = 0.0f;
-qboolean cl_bUseFighterPitch = qfalse;
-qboolean cl_crazyShipControls = qfalse;
-
 #ifdef VEH_CONTROL_SCHEME_4
 #define	OVERRIDE_MOUSE_SENSITIVITY 5.0f//20.0f = 180 degree turn in one mouse swipe across keyboard
 #else// VEH_CONTROL_SCHEME_4
@@ -55,74 +49,6 @@ void IN_Button10Down(void);
 void IN_Button10Up(void);
 void IN_Button6Down(void);
 void IN_Button6Up(void);
-void IN_UseGivenForce(void)
-{
-	char *c = Cmd_Argv(1);
-	int forceNum =-1;
-	int genCmdNum = 0;
-
-	if(c) {
-		forceNum = atoi(c);
-	} else {
-		return;
-	}
-
-	switch(forceNum) {
-	case FP_DRAIN:
-		IN_Button11Down();
-		IN_Button11Up();
-		break;
-	case FP_PUSH:
-		genCmdNum = GENCMD_FORCE_THROW;
-		break;
-	case FP_SPEED:
-		genCmdNum = GENCMD_FORCE_SPEED;
-		break;
-	case FP_PULL:
-		genCmdNum = GENCMD_FORCE_PULL;
-		break;
-	case FP_TELEPATHY:
-		genCmdNum = GENCMD_FORCE_DISTRACT;
-		break;
-	case FP_GRIP:
-		IN_Button6Down();
-		IN_Button6Up();
-		break;
-	case FP_LIGHTNING:
-		IN_Button10Down();
-		IN_Button10Up();
-		break;
-	case FP_RAGE:
-		genCmdNum = GENCMD_FORCE_RAGE;
-		break;
-	case FP_PROTECT:
-		genCmdNum = GENCMD_FORCE_PROTECT;
-		break;
-	case FP_ABSORB:
-		genCmdNum = GENCMD_FORCE_ABSORB;
-		break;
-	case FP_SEE:
-		genCmdNum = GENCMD_FORCE_SEEING;
-		break;
-	case FP_HEAL:
-		genCmdNum = GENCMD_FORCE_HEAL;
-		break;
-	case FP_TEAM_HEAL:
-		genCmdNum = GENCMD_FORCE_HEALOTHER;
-		break;
-	case FP_TEAM_FORCE:
-		genCmdNum = GENCMD_FORCE_FORCEPOWEROTHER;
-		break;
-	default:
-		assert(0);
-		break;
-	}
-
-	if(genCmdNum != 0) {
-		cl.gcmdSendValue = qtrue;
-		cl.gcmdValue = genCmdNum;
-	}
-}
 
 void IN_MLookDown( void ) {
 	in_mlooking = qtrue;
@@ -135,241 +61,13 @@ void IN_MLookUp( void ) {
 	}
 }
 
-void IN_GenCMD1( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_SABERSWITCH;
-}
-
-void IN_GenCMD2( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_ENGAGE_DUEL;
-}
-
-void IN_GenCMD3( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_HEAL;
-}
-
-void IN_GenCMD4( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_SPEED;
-}
-
-void IN_GenCMD5( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_PULL;
-}
-
-void IN_GenCMD6( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_DISTRACT;
-}
-
-void IN_GenCMD7( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_RAGE;
-}
-
-void IN_GenCMD8( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_PROTECT;
-}
-
-void IN_GenCMD9( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_ABSORB;
-}
-
-void IN_GenCMD10( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_HEALOTHER;
-}
-
-void IN_GenCMD11( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_FORCEPOWEROTHER;
-}
-
-void IN_GenCMD12( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_SEEING;
-}
-
-void IN_GenCMD13( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_SEEKER;
-}
-
-void IN_GenCMD14( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_FIELD;
-}
-
-void IN_GenCMD15( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_BACTA;
-}
-
-void IN_GenCMD16( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_ELECTROBINOCULARS;
-}
-
-void IN_GenCMD17( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_ZOOM;
-}
-
-void IN_GenCMD18( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_SENTRY;
-}
-
-void IN_GenCMD19( void )
-{
-	if (Cvar_VariableIntegerValue("d_saberStanceDebug"))
-	{
-		Com_Printf("SABERSTANCEDEBUG: Gencmd on client set successfully.\n");
-	}
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_SABERATTACKCYCLE;
-}
-
-void IN_GenCMD20( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FORCE_THROW;
-}
-
-void IN_GenCMD21( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_JETPACK;
-}
-
-void IN_GenCMD22( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_BACTABIG;
-}
-
-void IN_GenCMD23( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_HEALTHDISP;
-}
-
-void IN_GenCMD24( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_AMMODISP;
-}
-
-void IN_GenCMD25( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_EWEB;
-}
-
-void IN_GenCMD26( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_USE_CLOAK;
-}
-
-void IN_GenCMD27( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_TAUNT;
-}
-
-void IN_GenCMD28( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_BOW;
-}
-
-void IN_GenCMD29( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_MEDITATE;
-}
-
-void IN_GenCMD30( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_FLOURISH;
-}
-
-void IN_GenCMD31( void )
-{
-	cl.gcmdSendValue = qtrue;
-	cl.gcmdValue = GENCMD_GLOAT;
-}
-
-
-//toggle automap view mode
-static bool g_clAutoMapMode = false;
-void IN_AutoMapButton(void)
-{
-	g_clAutoMapMode = !g_clAutoMapMode;
-}
-
-//toggle between automap, radar, nothing
-extern cvar_t *r_autoMap;
-void IN_AutoMapToggle(void)
-{
-
-	if (Cvar_VariableIntegerValue("cg_drawRadar"))
-	{
-		Cvar_Set("cg_drawRadar", "0");
-	}
-	else
-	{
-		Cvar_Set("cg_drawRadar", "1");
-	}
-	/*
-	if (r_autoMap && r_autoMap->integer)
-	{ //automap off, radar on
-		Cvar_Set("r_autoMap", "0");
-		Cvar_Set("cg_drawRadar", "1");
-	}
-	else if (Cvar_VariableIntegerValue("cg_drawRadar"))
-	{ //radar off, automap should be off too
-		Cvar_Set("cg_drawRadar", "0");
-	}
-	else
-	{ //turn automap on
-		Cvar_Set("r_autoMap", "1");
-	}
-	*/
-}
-
 void IN_VoiceChatButton(void)
 {
 	if (!uivm)
 	{ //ui not loaded so this command is useless
 		return;
 	}
-	VM_Call( uivm, UI_SET_ACTIVE_MENU, UIMENU_VOICECHAT );
+	//VM_Call( uivm, UI_SET_ACTIVE_MENU, UIMENU_VOICECHAT );
 }
 
 void IN_KeyDown( kbutton_t *b ) {
@@ -491,143 +189,21 @@ float CL_KeyState( kbutton_t *key ) {
 	return val;
 }
 
-#define		AUTOMAP_KEY_FORWARD			1
-#define		AUTOMAP_KEY_BACK			2
-#define		AUTOMAP_KEY_YAWLEFT			3
-#define		AUTOMAP_KEY_YAWRIGHT		4
-#define		AUTOMAP_KEY_PITCHUP			5
-#define		AUTOMAP_KEY_PITCHDOWN		6
-#define		AUTOMAP_KEY_DEFAULTVIEW		7
-static autoMapInput_t			g_clAutoMapInput;
-//intercept certain keys during automap mode
-static void CL_AutoMapKey(int autoMapKey, qboolean up)
-{
-	autoMapInput_t *data = (autoMapInput_t *)cl.mSharedMemory;
-
-	switch (autoMapKey)
-	{
-	case AUTOMAP_KEY_FORWARD:
-        if (up)
-		{
-			g_clAutoMapInput.up = 0.0f;
-		}
-		else
-		{
-			g_clAutoMapInput.up = 16.0f;
-		}
-		break;
-	case AUTOMAP_KEY_BACK:
-        if (up)
-		{
-			g_clAutoMapInput.down = 0.0f;
-		}
-		else
-		{
-			g_clAutoMapInput.down = 16.0f;
-		}
-		break;
-	case AUTOMAP_KEY_YAWLEFT:
-		if (up)
-		{
-			g_clAutoMapInput.yaw = 0.0f;
-		}
-		else
-		{
-			g_clAutoMapInput.yaw = -4.0f;
-		}
-		break;
-	case AUTOMAP_KEY_YAWRIGHT:
-		if (up)
-		{
-			g_clAutoMapInput.yaw = 0.0f;
-		}
-		else
-		{
-			g_clAutoMapInput.yaw = 4.0f;
-		}
-		break;
-	case AUTOMAP_KEY_PITCHUP:
-		if (up)
-		{
-			g_clAutoMapInput.pitch = 0.0f;
-		}
-		else
-		{
-			g_clAutoMapInput.pitch = -4.0f;
-		}
-		break;
-	case AUTOMAP_KEY_PITCHDOWN:
-		if (up)
-		{
-			g_clAutoMapInput.pitch = 0.0f;
-		}
-		else
-		{
-			g_clAutoMapInput.pitch = 4.0f;
-		}
-		break;
-	case AUTOMAP_KEY_DEFAULTVIEW:
-		memset(&g_clAutoMapInput, 0, sizeof(autoMapInput_t));
-		g_clAutoMapInput.goToDefaults = qtrue;
-		break;
-	default:
-		break;
-	}
-
-	memcpy(data, &g_clAutoMapInput, sizeof(autoMapInput_t));
-
-	if (cgvm)
-	{
-		VM_Call(cgvm, CG_AUTOMAP_INPUT, 0);
-	}
-
-	g_clAutoMapInput.goToDefaults = qfalse;
-}
-
-
 void IN_UpDown(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_PITCHUP, qfalse);
-	}
-	else
-	{
-		IN_KeyDown(&in_up);
-	}
+	IN_KeyDown(&in_up);
 }
 void IN_UpUp(void) 
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_PITCHUP, qtrue);
-	}
-	else
-	{
-		IN_KeyUp(&in_up);
-	}
+	IN_KeyUp(&in_up);
 }
 void IN_DownDown(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_PITCHDOWN, qfalse);
-	}
-	else
-	{
-		IN_KeyDown(&in_down);
-	}
+	IN_KeyDown(&in_down);
 }
 void IN_DownUp(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_PITCHDOWN, qtrue);
-	}
-	else
-	{
-		IN_KeyUp(&in_down);
-	}
+	IN_KeyUp(&in_down);
 }
 void IN_LeftDown(void) {IN_KeyDown(&in_left);}
 void IN_LeftUp(void) {IN_KeyUp(&in_left);}
@@ -635,47 +211,19 @@ void IN_RightDown(void) {IN_KeyDown(&in_right);}
 void IN_RightUp(void) {IN_KeyUp(&in_right);}
 void IN_ForwardDown(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_FORWARD, qfalse);
-	}
-	else
-	{
-		IN_KeyDown(&in_forward);
-	}
+	IN_KeyDown(&in_forward);
 }
 void IN_ForwardUp(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_FORWARD, qtrue);
-	}
-	else
-	{
-		IN_KeyUp(&in_forward);
-	}
+	IN_KeyUp(&in_forward);
 }
 void IN_BackDown(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_BACK, qfalse);
-	}
-	else
-	{
-		IN_KeyDown(&in_back);
-	}
+	IN_KeyDown(&in_back);
 }
 void IN_BackUp(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_BACK, qtrue);
-	}
-	else
-	{
-		IN_KeyUp(&in_back);
-	}
+	IN_KeyUp(&in_back);
 }
 void IN_LookupDown(void) {IN_KeyDown(&in_lookup);}
 void IN_LookupUp(void) {IN_KeyUp(&in_lookup);}
@@ -683,47 +231,19 @@ void IN_LookdownDown(void) {IN_KeyDown(&in_lookdown);}
 void IN_LookdownUp(void) {IN_KeyUp(&in_lookdown);}
 void IN_MoveleftDown(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_YAWLEFT, qfalse);
-	}
-	else
-	{
-		IN_KeyDown(&in_moveleft);
-	}
+	IN_KeyDown(&in_moveleft);
 }
 void IN_MoveleftUp(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_YAWLEFT, qtrue);
-	}
-	else
-	{
-		IN_KeyUp(&in_moveleft);
-	}
+	IN_KeyUp(&in_moveleft);
 }
 void IN_MoverightDown(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_YAWRIGHT, qfalse);
-	}
-	else
-	{
-		IN_KeyDown(&in_moveright);
-	}
+	IN_KeyDown(&in_moveright);
 }
 void IN_MoverightUp(void)
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_YAWRIGHT, qtrue);
-	}
-	else
-	{
-		IN_KeyUp(&in_moveright);
-	}
+	IN_KeyUp(&in_moveright);
 }
 
 void IN_SpeedDown(void) {IN_KeyDown(&in_speed);}
@@ -746,14 +266,7 @@ void IN_Button4Down(void) {IN_KeyDown(&in_buttons[4]);}
 void IN_Button4Up(void) {IN_KeyUp(&in_buttons[4]);}
 void IN_Button5Down(void) //use key
 {
-	if (g_clAutoMapMode)
-	{
-		CL_AutoMapKey(AUTOMAP_KEY_DEFAULTVIEW, qfalse);
-	}
-	else
-	{
-		IN_KeyDown(&in_buttons[5]);
-	}
+	IN_KeyDown(&in_buttons[5]);
 }
 void IN_Button5Up(void) {IN_KeyUp(&in_buttons[5]);}
 void IN_Button6Down(void) {IN_KeyDown(&in_buttons[6]);}
@@ -826,44 +339,12 @@ void CL_AdjustAngles( void ) {
 	}
 
 	if ( !in_strafe.active ) {
-		if ( cl_mYawOverride )
-		{
-			if ( cl_mSensitivityOverride )
-			{
-				cl.viewangles[YAW] -= cl_mYawOverride*cl_mSensitivityOverride*speed*cl_yawspeed->value*CL_KeyState (&in_right);
-				cl.viewangles[YAW] += cl_mYawOverride*cl_mSensitivityOverride*speed*cl_yawspeed->value*CL_KeyState (&in_left);
-			}
-			else
-			{
-				cl.viewangles[YAW] -= cl_mYawOverride*OVERRIDE_MOUSE_SENSITIVITY*speed*cl_yawspeed->value*CL_KeyState (&in_right);
-				cl.viewangles[YAW] += cl_mYawOverride*OVERRIDE_MOUSE_SENSITIVITY*speed*cl_yawspeed->value*CL_KeyState (&in_left);
-			}
-		}
-		else
-		{
-			cl.viewangles[YAW] -= speed*cl_yawspeed->value*CL_KeyState (&in_right);
-			cl.viewangles[YAW] += speed*cl_yawspeed->value*CL_KeyState (&in_left);
-		}
+		cl.viewangles[YAW] -= speed*cl_yawspeed->value*CL_KeyState (&in_right);
+		cl.viewangles[YAW] += speed*cl_yawspeed->value*CL_KeyState (&in_left);
 	}
 
-	if ( cl_mPitchOverride )
-	{
-		if ( cl_mSensitivityOverride )
-		{
-			cl.viewangles[PITCH] -= cl_mPitchOverride*cl_mSensitivityOverride*speed*cl_pitchspeed->value * CL_KeyState (&in_lookup);
-			cl.viewangles[PITCH] += cl_mPitchOverride*cl_mSensitivityOverride*speed*cl_pitchspeed->value * CL_KeyState (&in_lookdown);
-		}
-		else
-		{
-			cl.viewangles[PITCH] -= cl_mPitchOverride*OVERRIDE_MOUSE_SENSITIVITY*speed*cl_pitchspeed->value * CL_KeyState (&in_lookup);
-			cl.viewangles[PITCH] += cl_mPitchOverride*OVERRIDE_MOUSE_SENSITIVITY*speed*cl_pitchspeed->value * CL_KeyState (&in_lookdown);
-		}
-	}
-	else
-	{
-		cl.viewangles[PITCH] -= speed*cl_pitchspeed->value * CL_KeyState (&in_lookup);
-		cl.viewangles[PITCH] += speed*cl_pitchspeed->value * CL_KeyState (&in_lookdown);
-	}
+	cl.viewangles[PITCH] -= speed*cl_pitchspeed->value * CL_KeyState (&in_lookup);
+	cl.viewangles[PITCH] += speed*cl_pitchspeed->value * CL_KeyState (&in_lookdown);
 }
 
 /*
@@ -887,7 +368,7 @@ void CL_KeyMove( usercmd_t *cmd ) {
 		cmd->buttons &= ~BUTTON_WALKING;
 	} else {
 		cmd->buttons |= BUTTON_WALKING;
-		movespeed = 46;
+		movespeed = 64;
 	}
 
 	forward = 0;
@@ -919,19 +400,7 @@ CL_MouseEvent
 =================
 */
 void CL_MouseEvent( int dx, int dy, int time ) {
-	if (g_clAutoMapMode && cgvm)
-	{ //automap input
-		autoMapInput_t *data = (autoMapInput_t *)cl.mSharedMemory;
-
-		g_clAutoMapInput.yaw = dx;
-		g_clAutoMapInput.pitch = dy;
-		memcpy(data, &g_clAutoMapInput, sizeof(autoMapInput_t));
-		VM_Call(cgvm, CG_AUTOMAP_INPUT, 1);
-
-		g_clAutoMapInput.yaw = 0.0f;
-		g_clAutoMapInput.pitch = 0.0f;
-	}
-	else if ( cls.keyCatchers & KEYCATCH_UI ) {
+	if ( cls.keyCatchers & KEYCATCH_UI ) {
 		VM_Call( uivm, UI_MOUSE_EVENT, dx, dy );
 	} else if (cls.keyCatchers & KEYCATCH_CGAME) {
 		VM_Call (cgvm, CG_MOUSE_EVENT, dx, dy);
@@ -984,42 +453,14 @@ void CL_JoystickMove( usercmd_t *cmd ) {
 	}
 
 	if ( !in_strafe.active ) {
-		if ( cl_mYawOverride )
-		{
-			if ( cl_mSensitivityOverride )
-			{
-				cl.viewangles[YAW] += cl_mYawOverride * cl_mSensitivityOverride * cl.joystickAxis[AXIS_SIDE]/2.0f;
-			}
-			else
-			{
-				cl.viewangles[YAW] += cl_mYawOverride * OVERRIDE_MOUSE_SENSITIVITY * cl.joystickAxis[AXIS_SIDE]/2.0f;
-			}
-		}
-		else
-		{
-			cl.viewangles[YAW] += anglespeed * (cl_yawspeed->value / 100.0f) * cl.joystickAxis[AXIS_SIDE];
-		}
+		cl.viewangles[YAW] += anglespeed * (cl_yawspeed->value / 100.0f) * cl.joystickAxis[AXIS_SIDE];
 	} else
 	{
 		cmd->rightmove = ClampChar( cmd->rightmove + cl.joystickAxis[AXIS_SIDE] );
 	}
 
 	if ( in_mlooking || cl_freelook->integer ) {
-		if ( cl_mPitchOverride )
-		{
-			if ( cl_mSensitivityOverride )
-			{
-				cl.viewangles[PITCH] += cl_mPitchOverride * cl_mSensitivityOverride * cl.joystickAxis[AXIS_FORWARD]/2.0f;
-			}
-			else
-			{
-				cl.viewangles[PITCH] += cl_mPitchOverride * OVERRIDE_MOUSE_SENSITIVITY * cl.joystickAxis[AXIS_FORWARD]/2.0f;
-			}
-		}
-		else
-		{
-			cl.viewangles[PITCH] += anglespeed * (cl_pitchspeed->value / 100.0f) * cl.joystickAxis[AXIS_FORWARD];
-		}
+		cl.viewangles[PITCH] += anglespeed * (cl_pitchspeed->value / 100.0f) * cl.joystickAxis[AXIS_FORWARD];
 	} else
 	{
 		cmd->forwardmove = ClampChar( cmd->forwardmove + cl.joystickAxis[AXIS_FORWARD] );
@@ -1038,7 +479,6 @@ void CL_MouseMove( usercmd_t *cmd ) {
 	float	accelSensitivity;
 	float	rate;
 	const float	speed = static_cast<float>(frame_msec);
-	const float pitch = cl_bUseFighterPitch?m_pitchVeh->value:m_pitch->value;
 
 	// allow mouse smoothing
 	if ( m_filter->integer ) {
@@ -1054,27 +494,9 @@ void CL_MouseMove( usercmd_t *cmd ) {
 	cl.mouseDy[cl.mouseIndex] = 0;
 
 	rate = SQRTFAST( mx * mx + my * my ) / speed;
-	if ( cl_mYawOverride || cl_mPitchOverride )
-	{//FIXME: different people have different speed mouses,
-		if ( cl_mSensitivityOverride )
-		{
-			//this will fuck things up for them, need to clamp 
-			//max input?
-			accelSensitivity = cl_mSensitivityOverride;
-		}
-		else
-		{
-			accelSensitivity = cl_sensitivity->value + rate * cl_mouseAccel->value;
-			// scale by FOV
-			accelSensitivity *= cl.cgameSensitivity;
-		}
-	}
-	else
-	{
-		accelSensitivity = cl_sensitivity->value + rate * cl_mouseAccel->value;
-		// scale by FOV
-		accelSensitivity *= cl.cgameSensitivity;
-	}
+	accelSensitivity = cl_sensitivity->value + rate * cl_mouseAccel->value;
+	// scale by FOV
+	accelSensitivity *= cl.cgameSensitivity;
 
 	if ( rate && cl_showMouseRate->integer ) {
 		Com_Printf( "%f : %f\n", rate, accelSensitivity );
@@ -1091,49 +513,18 @@ void CL_MouseMove( usercmd_t *cmd ) {
 	if ( in_strafe.active ) {
 		cmd->rightmove = ClampChar( cmd->rightmove + m_side->value * mx );
 	} else {
-		if ( cl_mYawOverride )
-		{
-			cl.viewangles[YAW] -= cl_mYawOverride * mx;
-		}
-		else
-		{
-			cl.viewangles[YAW] -= m_yaw->value * mx;
-		}
+		cl.viewangles[YAW] -= m_yaw->value * mx;
 	}
 
 	if ( (in_mlooking || cl_freelook->integer) && !in_strafe.active ) {
 		// VVFIXME - This is supposed to be a CVAR
 		const float cl_pitchSensitivity = 1.0f;
-		if ( cl_mPitchOverride )
-		{
-			if ( pitch > 0 )
-			{
-				cl.viewangles[PITCH] += cl_mPitchOverride * my * cl_pitchSensitivity;
-			}
-			else
-			{
-				cl.viewangles[PITCH] -= cl_mPitchOverride * my * cl_pitchSensitivity;
-			}
-		}
-		else
-		{
-			cl.viewangles[PITCH] += pitch * my * cl_pitchSensitivity;
-		}
+		cl.viewangles[PITCH] += m_pitch->value * my * cl_pitchSensitivity;
 	} else {
 		cmd->forwardmove = ClampChar( cmd->forwardmove - m_forward->value * my );
 	}
 }
 
-qboolean CL_NoUseableForce(void)
-{
-	if (!cgvm)
-	{ //ahh, no cgame loaded
-		return qfalse;
-	}
-
-	return (qboolean)VM_Call(cgvm, CG_GET_USEABLE_FORCE);
-}
-
 /*
 ==============
 CL_CmdButtons
@@ -1154,15 +545,6 @@ void CL_CmdButtons( usercmd_t *cmd ) {
 		in_buttons[i].wasPressed = qfalse;
 	}
 
-	if (cmd->buttons & BUTTON_FORCEPOWER)
-	{ //check for transferring a use force to a use inventory...
-		if ((cmd->buttons & BUTTON_USE) || CL_NoUseableForce())
-		{ //it's pushed, remap it!
-			cmd->buttons &= ~BUTTON_FORCEPOWER;
-			cmd->buttons |= BUTTON_USE_HOLDABLE;
-		}
-	}
-
 	if ( cls.keyCatchers ) {
 		cmd->buttons |= BUTTON_TALK;
 	}
@@ -1187,19 +569,12 @@ void CL_FinishMove( usercmd_t *cmd ) {
 
 	// copy the state that the cgame is currently sending
 	cmd->weapon = cl.cgameUserCmdValue;
-	cmd->forcesel = cl.cgameForceSelection;
-	cmd->invensel = cl.cgameInvenSelection;
 
 	if (cl.gcmdSendValue)
 	{
-		cmd->generic_cmd = cl.gcmdValue;
 		//cl.gcmdSendValue = qfalse;
 		cl.gcmdSentValue = qtrue;
 	}
-	else
-	{
-		cmd->generic_cmd = 0;
-	}
 
 	// send the current server time so the amount of movement
 	// can be determined without allowing cheating
@@ -1213,56 +588,11 @@ void CL_FinishMove( usercmd_t *cmd ) {
 		cl.cgameViewAngleForceTime = 0;
 	}
 
-	if ( cl_crazyShipControls )
-	{
-		float pitchSubtract, pitchDelta, yawDelta;
-
-		yawDelta = AngleSubtract(cl.viewangles[YAW],cl_lastViewAngles[YAW]);
-		//yawDelta *= (4.0f*pVeh->m_fTimeModifier);
-		cl_sendAngles[ROLL] -= yawDelta;
-
-		float nRoll = fabs(cl_sendAngles[ROLL]);
-
-		pitchDelta = AngleSubtract(cl.viewangles[PITCH],cl_lastViewAngles[PITCH]);
-		//pitchDelta *= (2.0f*pVeh->m_fTimeModifier);
-		pitchSubtract = pitchDelta * (nRoll/90.0f);
-		cl_sendAngles[PITCH] += pitchDelta-pitchSubtract;
-
-		//yaw-roll calc should be different
-		if (nRoll > 90.0f)
-		{
-			nRoll -= 180.0f;
-		}
-		if (nRoll < 0.0f)
-		{
-			nRoll = -nRoll;
-		}
-		pitchSubtract = pitchDelta * (nRoll/90.0f);
-		if ( cl_sendAngles[ROLL] > 0.0f )
-		{
-			cl_sendAngles[YAW] += pitchSubtract;
-		}
-		else
-		{
-			cl_sendAngles[YAW] -= pitchSubtract;
-		}
-		
-		cl_sendAngles[PITCH] = AngleNormalize180( cl_sendAngles[PITCH] );
-		cl_sendAngles[YAW] = AngleNormalize360( cl_sendAngles[YAW] );
-		cl_sendAngles[ROLL] = AngleNormalize180( cl_sendAngles[ROLL] );
-
-		for (i=0 ; i<3 ; i++) {
-			cmd->angles[i] = ANGLE2SHORT(cl_sendAngles[i]);
-		}
-	}
-	else
-	{
-		for (i=0 ; i<3 ; i++) {
-			cmd->angles[i] = ANGLE2SHORT(cl.viewangles[i]);
-		}
-		//in case we switch to the cl_crazyShipControls
-		VectorCopy( cl.viewangles, cl_sendAngles );
+	for (i=0 ; i<3 ; i++) {
+		cmd->angles[i] = ANGLE2SHORT(cl.viewangles[i]);
 	}
+	//in case we switch to the cl_crazyShipControls
+	VectorCopy( cl.viewangles, cl_sendAngles );
 	//always needed in for the cl_crazyShipControls
 	VectorCopy( cl.viewangles, cl_lastViewAngles );
 }
@@ -1591,8 +921,7 @@ CL_InitInput
 void CL_InitInput( void ) {
 	Cmd_AddCommand ("centerview",IN_CenterView);
 
-	//Cmd_AddCommand ("+taunt", IN_Button3Down);//gesture
-	//Cmd_AddCommand ("-taunt", IN_Button3Up);
+	//The button numbers are mapped to BUTTON_ defines
 	Cmd_AddCommand ("+moveup",IN_UpDown);
 	Cmd_AddCommand ("-moveup",IN_UpUp);
 	Cmd_AddCommand ("+movedown",IN_DownDown);
@@ -1603,6 +932,7 @@ void CL_InitInput( void ) {
 	Cmd_AddCommand ("-right",IN_RightUp);
 	Cmd_AddCommand ("+forward",IN_ForwardDown);
 	Cmd_AddCommand ("-forward",IN_ForwardUp);
+	//Cmd_AddCommand ("+autorun",IN_AutoRun);
 	Cmd_AddCommand ("+back",IN_BackDown);
 	Cmd_AddCommand ("-back",IN_BackUp);
 	Cmd_AddCommand ("+lookup", IN_LookupDown);
@@ -1617,94 +947,62 @@ void CL_InitInput( void ) {
 	Cmd_AddCommand ("-moveright", IN_MoverightUp);
 	Cmd_AddCommand ("+speed", IN_SpeedDown);
 	Cmd_AddCommand ("-speed", IN_SpeedUp);
-	Cmd_AddCommand ("+attack", IN_Button0Down);
+	Cmd_AddCommand ("+attack", IN_Button0Down);//attack
 	Cmd_AddCommand ("-attack", IN_Button0Up);
-	//Cmd_AddCommand ("+force_jump", IN_Button1Down);//force jump
-	//Cmd_AddCommand ("-force_jump", IN_Button1Up);
-	Cmd_AddCommand ("+use", IN_Button5Down);
+	Cmd_AddCommand ("+lean", IN_Button3Down);//lean
+	Cmd_AddCommand ("-lean", IN_Button3Up);
+	Cmd_AddCommand ("+use", IN_Button5Down);//use object
 	Cmd_AddCommand ("-use", IN_Button5Up);
-	Cmd_AddCommand ("+force_grip", IN_Button6Down);//force grip
-	Cmd_AddCommand ("-force_grip", IN_Button6Up);
 	Cmd_AddCommand ("+altattack", IN_Button7Down);//altattack
 	Cmd_AddCommand ("-altattack", IN_Button7Up);
-	Cmd_AddCommand ("+useforce", IN_Button9Down);//active force power
-	Cmd_AddCommand ("-useforce", IN_Button9Up);
-	Cmd_AddCommand ("+force_lightning", IN_Button10Down);//active force power
-	Cmd_AddCommand ("-force_lightning", IN_Button10Up);
-	Cmd_AddCommand ("+force_drain", IN_Button11Down);//active force power
-	Cmd_AddCommand ("-force_drain", IN_Button11Up);
+	Cmd_AddCommand ("+leanleft", IN_Button13Down);//lean left
+	Cmd_AddCommand ("-leanleft", IN_Button13Up);
+	Cmd_AddCommand ("+leanright", IN_Button12Down);//lean right
+	Cmd_AddCommand ("-leanright", IN_Button12Up);
+	Cmd_AddCommand ("+reload", IN_Button6Down);//reload
+	Cmd_AddCommand ("-reload", IN_Button6Up);
+	Cmd_AddCommand ("+zoomin", IN_Button9Down);//zoom in
+	Cmd_AddCommand ("-zoomin", IN_Button9Up);
+	Cmd_AddCommand ("+zoomout", IN_Button10Down);//zoom out
+	Cmd_AddCommand ("-zoomout", IN_Button10Up);
+	Cmd_AddCommand ("+firemode", IN_Button11Down);//firemode
+	Cmd_AddCommand ("-firemode", IN_Button11Up);
+	Cmd_AddCommand ("+goggles", IN_Button2Down);//goggles
+	Cmd_AddCommand ("-goggles", IN_Button2Up);
 	//buttons
 	Cmd_AddCommand ("+button0", IN_Button0Down);//attack
 	Cmd_AddCommand ("-button0", IN_Button0Up);
-	Cmd_AddCommand ("+button1", IN_Button1Down);//force jump
+	Cmd_AddCommand ("+button1", IN_Button1Down);//talk
 	Cmd_AddCommand ("-button1", IN_Button1Up);
-	Cmd_AddCommand ("+button2", IN_Button2Down);//use holdable (not used - change to use jedi power?)
+	Cmd_AddCommand ("+button2", IN_Button2Down);//goggles
 	Cmd_AddCommand ("-button2", IN_Button2Up);
-	Cmd_AddCommand ("+button3", IN_Button3Down);//gesture
+	Cmd_AddCommand ("+button3", IN_Button3Down);//lean
 	Cmd_AddCommand ("-button3", IN_Button3Up);
 	Cmd_AddCommand ("+button4", IN_Button4Down);//walking
 	Cmd_AddCommand ("-button4", IN_Button4Up);
 	Cmd_AddCommand ("+button5", IN_Button5Down);//use object
 	Cmd_AddCommand ("-button5", IN_Button5Up);
-	Cmd_AddCommand ("+button6", IN_Button6Down);//force grip
+	Cmd_AddCommand ("+button6", IN_Button6Down);//reload
 	Cmd_AddCommand ("-button6", IN_Button6Up);
 	Cmd_AddCommand ("+button7", IN_Button7Down);//altattack
 	Cmd_AddCommand ("-button7", IN_Button7Up);
 	Cmd_AddCommand ("+button8", IN_Button8Down);
 	Cmd_AddCommand ("-button8", IN_Button8Up);
-	Cmd_AddCommand ("+button9", IN_Button9Down);//active force power
+	Cmd_AddCommand ("+button9", IN_Button9Down);//zoom in
 	Cmd_AddCommand ("-button9", IN_Button9Up);
-	Cmd_AddCommand ("+button10", IN_Button10Down);//force lightning
+	Cmd_AddCommand ("+button10", IN_Button10Down);//zoom out
 	Cmd_AddCommand ("-button10", IN_Button10Up);
-	Cmd_AddCommand ("+button11", IN_Button11Down);//force drain
+	Cmd_AddCommand ("+button11", IN_Button11Down);//firemode
 	Cmd_AddCommand ("-button11", IN_Button11Up);
-	Cmd_AddCommand ("+button12", IN_Button12Down);
+	Cmd_AddCommand ("+button12", IN_Button12Down);//lean right
 	Cmd_AddCommand ("-button12", IN_Button12Up);
-	Cmd_AddCommand ("+button13", IN_Button13Down);
+	Cmd_AddCommand ("+button13", IN_Button13Down);//lean left
 	Cmd_AddCommand ("-button13", IN_Button13Up);
 	Cmd_AddCommand ("+button14", IN_Button14Down);
 	Cmd_AddCommand ("-button14", IN_Button14Up);
 	Cmd_AddCommand ("+mlook", IN_MLookDown);
 	Cmd_AddCommand ("-mlook", IN_MLookUp);
 
-	Cmd_AddCommand ("sv_saberswitch", IN_GenCMD1);
-	Cmd_AddCommand ("engage_duel", IN_GenCMD2);
-	Cmd_AddCommand ("force_heal", IN_GenCMD3);
-	Cmd_AddCommand ("force_speed", IN_GenCMD4);
-	Cmd_AddCommand ("force_pull", IN_GenCMD5);
-	Cmd_AddCommand ("force_distract", IN_GenCMD6);
-	Cmd_AddCommand ("force_rage", IN_GenCMD7);
-	Cmd_AddCommand ("force_protect", IN_GenCMD8);
-	Cmd_AddCommand ("force_absorb", IN_GenCMD9);
-	Cmd_AddCommand ("force_healother", IN_GenCMD10);
-	Cmd_AddCommand ("force_forcepowerother", IN_GenCMD11);
-	Cmd_AddCommand ("force_seeing", IN_GenCMD12);
-	Cmd_AddCommand ("use_seeker", IN_GenCMD13);
-	Cmd_AddCommand ("use_field", IN_GenCMD14);
-	Cmd_AddCommand ("use_bacta", IN_GenCMD15);
-	Cmd_AddCommand ("use_electrobinoculars", IN_GenCMD16);
-	Cmd_AddCommand ("zoom", IN_GenCMD17);
-	Cmd_AddCommand ("use_sentry", IN_GenCMD18);
-	Cmd_AddCommand ("use_jetpack", IN_GenCMD21);
-	Cmd_AddCommand ("use_bactabig", IN_GenCMD22);
-	Cmd_AddCommand ("use_healthdisp", IN_GenCMD23);
-	Cmd_AddCommand ("use_ammodisp", IN_GenCMD24);
-	Cmd_AddCommand ("use_eweb", IN_GenCMD25);
-	Cmd_AddCommand ("use_cloak", IN_GenCMD26);
-	Cmd_AddCommand ("taunt", IN_GenCMD27);
-	Cmd_AddCommand ("bow", IN_GenCMD28);
-	Cmd_AddCommand ("meditate", IN_GenCMD29);
-	Cmd_AddCommand ("flourish", IN_GenCMD30);
-	Cmd_AddCommand ("gloat", IN_GenCMD31);
-	Cmd_AddCommand ("saberAttackCycle", IN_GenCMD19);
-	Cmd_AddCommand ("force_throw", IN_GenCMD20);
-	Cmd_AddCommand ("useGivenForce", IN_UseGivenForce);
-
-
-	Cmd_AddCommand("automap_button", IN_AutoMapButton);
-	Cmd_AddCommand("automap_toggle", IN_AutoMapToggle);
-	Cmd_AddCommand("voicechat", IN_VoiceChatButton);
-
 	cl_nodelta = Cvar_Get ("cl_nodelta", "0", 0);
 	cl_debugMove = Cvar_Get ("cl_debugMove", "0", 0);
 }
diff --git a/codemp/client/cl_keys.cpp b/codemp/client/cl_keys.cpp
index fb55957..c10e485 100644
