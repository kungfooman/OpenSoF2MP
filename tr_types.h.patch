--- a/codemp/renderer/tr_types.h
+++ b/codemp/renderer/tr_types.h
@@ -5,62 +5,62 @@
 
 
 #define	MAX_DLIGHTS		32			// can't be increased, because bit flags are used on surfaces
-#define	MAX_ENTITIES	2048		// 11 bits, can't be increased without changing drawsurf bit packing (QSORT_ENTITYNUM_SHIFT)
+#define	MAX_ENTITIES	1023		// 11 bits, can't be increased without changing drawsurf bit packing (QSORT_ENTITYNUM_SHIFT)
 #define	MAX_MINI_ENTITIES	1024		
 
 #define	TR_WORLDENT		(MAX_ENTITIES-1)
 
 // renderfx flags
-#define	RF_MINLIGHT			0x00001	// allways have some light (viewmodel, some items)
-#define	RF_THIRD_PERSON		0x00002	// don't draw through eyes, only mirrors (player bodies, chat sprites)
-#define	RF_FIRST_PERSON		0x00004	// only draw through eyes (view weapon, damage blood blob)
-#define	RF_DEPTHHACK		0x00008	// for view weapon Z crunching
-#define RF_NODEPTH			0x00010	// No depth at all (seeing through walls)
+#define	RF_MINLIGHT			1	// allways have some light (viewmodel, some items)
+#define	RF_THIRD_PERSON		2	// don't draw through eyes, only mirrors (player bodies, chat sprites)
+#define	RF_FIRST_PERSON		4	// only draw through eyes (view weapon, damage blood blob)
+#define	RF_DEPTHHACK		8	// for view weapon Z crunching
+//#define RF_NODEPTH			0x00010	// No depth at all (seeing through walls)
 
-#define RF_VOLUMETRIC		0x00020	// fake volumetric shading
+//#define RF_VOLUMETRIC		0x00020	// fake volumetric shading
 
-#define	RF_NOSHADOW			0x00040	// don't add stencil shadows
+#define	RF_NOSHADOW			64	// don't add stencil shadows
 
-#define RF_LIGHTING_ORIGIN	0x00080	// use refEntity->lightingOrigin instead of refEntity->origin
+#define RF_LIGHTING_ORIGIN	128	// use refEntity->lightingOrigin instead of refEntity->origin
 									// for lighting.  This allows entities to sink into the floor
 									// with their origin going solid, and allows all parts of a
 									// player to get the same lighting
-#define	RF_SHADOW_PLANE		0x00100	// use refEntity->shadowPlane
-#define	RF_WRAP_FRAMES		0x00200	// mod the model frames by the maxframes to allow continuous
+#define	RF_SHADOW_PLANE		256	// use refEntity->shadowPlane
+#define	RF_WRAP_FRAMES		512	// mod the model frames by the maxframes to allow continuous
 										// animation without needing to know the frame count
 
-#define RF_FORCE_ENT_ALPHA	0x00400 // override shader alpha settings
-#define RF_RGB_TINT			0x00800 // override shader rgb settings
+//#define RF_FORCE_ENT_ALPHA	0x00400 // override shader alpha settings
+//#define RF_RGB_TINT			0x00800 // override shader rgb settings
 
-#define	RF_SHADOW_ONLY		0x01000	//add surfs for shadowing but don't draw them -rww
+//#define	RF_SHADOW_ONLY		0x01000	//add surfs for shadowing but don't draw them -rww
 
-#define	RF_DISTORTION		0x02000	//area distortion effect -rww
+//#define	RF_DISTORTION		0x02000	//area distortion effect -rww
 
-#define RF_FORKED			0x04000	// override lightning to have forks
-#define RF_TAPERED			0x08000	// lightning tapers
-#define RF_GROW				0x10000	// lightning grows from start to end during its life
+#define RF_FORKED			0x00001000	// override lightning to have forks
+#define RF_TAPERED			0x00002000	// lightning tapers
+#define RF_GROW				0x00004000	// lightning grows from start to end during its life
+#define RF_NO_FOG			0x00008000	// no fog for g2 models
+//#define RF_DISINTEGRATE1	0x20000	// does a procedural hole-ripping thing.
+//#define RF_DISINTEGRATE2	0x40000	// does a procedural hole-ripping thing with scaling at the ripping point
 
-#define RF_DISINTEGRATE1	0x20000	// does a procedural hole-ripping thing.
-#define RF_DISINTEGRATE2	0x40000	// does a procedural hole-ripping thing with scaling at the ripping point
+//#define RF_SETANIMINDEX		0x80000	//use backEnd.currentEntity->e.skinNum for R_BindAnimatedImage
 
-#define RF_SETANIMINDEX		0x80000	//use backEnd.currentEntity->e.skinNum for R_BindAnimatedImage
+//#define RF_ALPHA_DEPTH		0x100000 //depth write on alpha model
 
-#define RF_ALPHA_DEPTH		0x100000 //depth write on alpha model
-
-#define RF_FORCEPOST		0x200000 //force it to post-render -rww
+//#define RF_FORCEPOST		0x200000 //force it to post-render -rww
 
 // refdef flags
 #define RDF_NOWORLDMODEL	1		// used for player configuration screen
-#define RDF_HYPERSPACE		4		// teleportation effect
+#define RDF_PROJECTION2D	2
 
-#define RDF_SKYBOXPORTAL	8
-#define RDF_DRAWSKYBOX		16		// the above marks a scene as being a 'portal sky'.  this flag says to draw it or not
+//#define RDF_SKYBOXPORTAL	8
+//#define RDF_DRAWSKYBOX		16		// the above marks a scene as being a 'portal sky'.  this flag says to draw it or not
 
-#define RDF_AUTOMAP			32		//means this scene is to draw the automap -rww
-#define	RDF_NOFOG			64		//no global fog in this scene (but still brush fog) -rww
+//#define RDF_AUTOMAP			32		//means this scene is to draw the automap -rww
+//#define	RDF_NOFOG			64		//no global fog in this scene (but still brush fog) -rww
 
-extern int	skyboxportal;
-extern int	drawskyboxportal;
+//extern int	skyboxportal;
+//extern int	drawskyboxportal;
 
 typedef byte color4ub_t[4];
 
@@ -82,7 +82,6 @@ typedef enum {
 	RT_SPRITE,
 	RT_ORIENTED_QUAD,
 	RT_BEAM,
-	RT_SABER_GLOW,
 	RT_ELECTRICITY,
 	RT_PORTALSURFACE,		// doesn't draw anything, just info for portals
 	RT_LINE,
@@ -230,9 +229,6 @@ typedef struct {
 		} electricity;
 	} data;
 
-	float		endTime;
-	float		saberLength;
-
 /*
 Ghoul2 Insert Start
 */
@@ -311,9 +307,9 @@ typedef struct {
 	int			x, y, width, height;
 	float		fov_x, fov_y;
 	vec3_t		vieworg;
-	vec3_t		viewangles;
+	//vec3_t		viewangles;
 	vec3_t		viewaxis[3];		// transformation matrix
-	int			viewContents;		// world contents at vieworg
+	//int			viewContents;		// world contents at vieworg
 
 	// time in milliseconds for shader effects and other time dependent rendering issues
 	int			time;
@@ -325,6 +321,7 @@ typedef struct {
 
 	// text messages for deform text shaders
 	char		text[MAX_RENDER_STRINGS][MAX_RENDER_STRING_LENGTH];
+	vec3_t		viewangles;
 } refdef_t;
 
 
@@ -349,24 +346,63 @@ typedef enum { // r_ext_preferred_tc_method
 	TC_S3TC_DXT
 } textureCompression_t;
 
+typedef enum {
+	GLDRV_ICD,					// driver is integrated with window system
+								// WARNING: there are tests that check for
+								// > GLDRV_ICD for minidriverness, so this
+								// should always be the lowest value in this
+								// enum set
+	GLDRV_STANDALONE,			// driver is a non-3Dfx standalone driver
+	GLDRV_VOODOO				// driver is a 3Dfx standalone driver
+} glDriverType_t;
+
+typedef enum {
+	GLHW_GENERIC,			// where everthing works the way it should
+	GLHW_3DFX_2D3D,			// Voodoo Banshee or Voodoo3, relevant since if this is
+							// the hardware type then there can NOT exist a secondary
+							// display adapter
+	GLHW_RIVA128,			// where you can't interpolate alpha
+	GLHW_RAGEPRO,			// where you can't modulate alpha on alpha textures
+	GLHW_PERMEDIA2			// where you don't have src*dst
+} glHardwareType_t;
+
 typedef struct {
-	const char				*renderer_string;
-	const char				*vendor_string;
-	const char				*version_string;
-	const char				*extensions_string;
+	char					renderer_string[MAX_STRING_CHARS];
+	char					vendor_string[MAX_STRING_CHARS];
+	char					version_string[MAX_STRING_CHARS];
+	char					extensions_string[BIG_INFO_STRING];
 
 	int						maxTextureSize;			// queried from GL
 	int						maxActiveTextures;		// multitexture ability
-	float					maxTextureFilterAnisotropy;
+
+	int						tfSolidCompressed;
+	float					tfSolidCompressedBPT;
+	int						tfAlphaCompressed;	
+	float					tfAlphaCompressedBPT;	
+	int						tfSolidUncompressed;
+	float					tfSolidUncompressedBPT;
+	int						tfAlphaUncompressed;
+	float					tfAlphaUncompressedBPT;
+	int						tfLightmap;			
+	float					tfLightmapBPT;			
+	int						tfCinematic;					// Specially for the Voodoo4 - glTexImage2D can only handle 16 bit
+	float					tfCinematicBPT;
 
 	int						colorBits, depthBits, stencilBits;
 
+	glDriverType_t			driverType;
+	glHardwareType_t		hardwareType;
+
 	qboolean				deviceSupportsGamma;
-	textureCompression_t	textureCompression;
 	qboolean				textureEnvAddAvailable;
+	qboolean				textureFilterAnisotropicAvailable;
 	qboolean				clampToEdgeAvailable;
 
 	int						vidWidth, vidHeight;
+	// aspect is the screen's physical width / height, which may be different
+	// than scrWidth / scrHeight if the pixels are non-square
+	// normal screens should be 4/3, but wide aspect monitors may be 16/9
+	float					windowAspect;
 
 	int						displayFrequency;
 
@@ -375,6 +411,7 @@ typedef struct {
 	// used CDS.
 	qboolean				isFullscreen;
 	qboolean				stereoEnabled;
+	qboolean				smpActive;		// dual processor
 } glconfig_t;
 
 
diff --git a/codemp/server/NPCNav/gameCallbacks.cpp b/codemp/server/NPCNav/gameCallbacks.cpp
index edd3343..7b615d9 100644
